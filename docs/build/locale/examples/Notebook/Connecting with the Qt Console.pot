# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015, Jupyter Team, https://jupyter.org
# This file is distributed under the same license as the Jupyter Notebook package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Jupyter Notebook 6.0\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-01-09 12:22+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:13
msgid "Connecting to an existing IPython kernel using the Qt Console"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:21
msgid "The Frontend/Kernel Model"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:28
msgid "The traditional IPython (``ipython``) consists of a single process that combines a terminal based UI with the process that runs the users code."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:30
msgid "While this traditional application still exists, the modern Jupyter consists of two processes:"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:32
msgid "Kernel: this is the process that runs the users code."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:33
msgid "Frontend: this is the process that provides the user interface where the user types code and sees results."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:35
msgid "Jupyter currently has 3 frontends:"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:37
msgid "Terminal Console (``jupyter console``)"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:38
msgid "Qt Console (``jupyter qtconsole``)"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:39
msgid "Notebook (``jupyter notebook``)"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:41
msgid "The Kernel and Frontend communicate over a ZeroMQ/JSON based messaging protocol, which allows multiple Frontends (even of different types) to communicate with a single Kernel. This opens the door for all sorts of interesting things, such as connecting a Console or Qt Console to a Notebook’s Kernel. For example, you may want to connect a Qt console to your Notebook’s Kernel and use it as a help browser, calling ``??`` on objects in the Qt console (whose pager is more flexible than the one in the notebook)."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:44
msgid "This Notebook describes how you would connect another Frontend to an IPython Kernel that is associated with a Notebook. The commands currently given here are specific to the IPython kernel."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:52
msgid "Manual connection"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:59
msgid "To connect another Frontend to a Kernel manually, you first need to find out the connection information for the Kernel using the ``%connect_info`` magic:"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:73
msgid "You can see that this magic displays everything you need to connect to this Notebook’s Kernel."
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:81
msgid "Automatic connection using a new Qt Console"
msgstr ""

#: ../../source/examples/Notebook/Connecting with the Qt Console.ipynb:88
msgid "You can also start a new Qt Console connected to your current Kernel by using the ``%qtconsole`` magic. This will detect the necessary connection information and start the Qt Console for you automatically."
msgstr ""

